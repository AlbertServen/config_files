{"mode":"editor","version":1,"windowDimensions":{"x":478,"y":24,"width":1200,"height":996,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/home/bellahora-04/Downloads/node-soap-master"],"buffers":[{"text":"","markerStore":{"nextMarkerId":2,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":4,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":0,"undoStack":[],"redoStack":[]},"encoding":"utf8","modifiedWhenLastPersisted":false,"deserializer":"TextBuffer","version":2},{"text":"\"use strict\";\n\nmodule.exports = require('./lib/soap');\n","markerStore":{"nextMarkerId":2,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/bellahora-04/Downloads/node-soap-master/index.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"6a0840399de731870443e099512977c8a716a36f","deserializer":"TextBuffer","version":2},{"text":"language: node_js\nnode_js:\n  - 0.8\n  - 0.10\n  - 0.12\n  - iojs\nbefore_install:\n  - npm install -g npm@~1.4.6\n","markerStore":{"nextMarkerId":2,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/bellahora-04/Downloads/node-soap-master/.travis.yml","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"929c6ab38d0afdf2dea6a6d06991558023b1ac73","deserializer":"TextBuffer","version":2},{"text":"/test/\n.idea\n","markerStore":{"nextMarkerId":2,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":16,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/bellahora-04/Downloads/node-soap-master/.npmignore","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"67c54e12231bad690456a39a0d4e848519da9779","deserializer":"TextBuffer","version":2},{"text":"{\n  \"bitwise\":false,\n  \"boss\":true,\n  \"expr\":true,\n  \"camelcase\":false,\n  \"curly\":false,\n  \"eqeqeq\":true,\n  \"freeze\":true,\n  \"immed\":true,\n  \"indent\":2,\n  \"latedef\":\"nofunc\",\n  \"laxbreak\":true,\n  \"laxcomma\":true,\n  \"newcap\":true,\n  \"noarg\":true,\n  \"node\":true,\n  \"strict\": true,\n  \"trailing\":true,\n  \"undef\":true,\n  \"predef\": [\n    \"describe\",         // Used by mocha\n    \"it\",               // Used by mocha\n    \"before\",           // Used by mocha\n    \"beforeEach\",       // Used by mocha\n    \"after\",            // Used by mocha\n    \"afterEach\"         // Used by mocha\n  ]\n}","markerStore":{"nextMarkerId":8,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":20,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"6":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":true},"7":{"range":{"start":{"row":27,"column":0},"end":{"row":27,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/bellahora-04/Downloads/node-soap-master/.jshintrc","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"a4fd4849b87b47f7aac6eec67ceaa1cffc4767ca","deserializer":"TextBuffer","version":2},{"text":"node_modules\nnpm-debug.log\n\n.idea\n*.iml\n","markerStore":{"nextMarkerId":2,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":24,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/bellahora-04/Downloads/node-soap-master/.gitignore","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"de147595e20898d5bb15199ad2f6419541abaeeb","deserializer":"TextBuffer","version":2},{"text":"# EditorConfig for the node-soap library - head over to editorconfig.org to see if you editor supports this file.\n\n# this is the topmost .editorconfig file\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n[*.xml]\ninsert_final_newline = false\n\n[*.js]\nindent_style = space\nindent_size = 2\n\n[*.json]\nindent_style = space\nindent_size = 2\n\n[{package.json,.travis.yml}]\nindent_style = space\nindent_size = 2\n","markerStore":{"nextMarkerId":8,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":28,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/bellahora-04/Downloads/node-soap-master/.editorconfig","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"761e25c1ea1d100f3b5cfdc9959991eaf3fa3036","deserializer":"TextBuffer","version":2},{"text":"'use strict';\n\nvar fs = require('fs'),\n    soap = require('..'),\n    http = require('http'),\n    assert = require('assert');\n\ndescribe('SOAP Client', function() {\n  it('should error on invalid host', function(done) {\n    soap.createClient('http://localhost:1', function(err, client) {\n      assert.ok(err);\n      done();\n    });\n  });\n\n  it('should add and clear soap headers', function(done) {\n    soap.createClient(__dirname+'/wsdl/default_namespace.wsdl', function(err, client) {\n      assert.ok(client);\n      assert.ok(!client.getSoapHeaders());\n\n      client.addSoapHeader('header1');\n      client.addSoapHeader('header2');\n\n      assert.ok(client.getSoapHeaders().length === 2);\n      assert.ok(client.getSoapHeaders()[0] === 'header1');\n      assert.ok(client.getSoapHeaders()[1] === 'header2');\n\n      client.clearSoapHeaders();\n      assert.ok(!client.getSoapHeaders());\n      done();\n    });\n  });\n\n  it('should issue async callback for cached wsdl', function(done) {\n    var called = false;\n    soap.createClient(__dirname+'/wsdl/default_namespace.wsdl', function(err, client) {\n      assert.ok(client);\n      assert.ok(!err);\n      called = true;\n      done();\n    });\n    assert(!called);\n  });\n\n  it('should allow customization of httpClient', function(done) {\n    var myHttpClient =  {\n      request: function() {}\n    };\n    soap.createClient(__dirname + '/wsdl/default_namespace.wsdl',\n      {httpClient: myHttpClient},\n      function(err, client) {\n        assert.ok(client);\n        assert.ok(!err);\n        assert.equal(client.httpClient, myHttpClient);\n        done();\n      });\n  });\n\n  it('should allow customization of request for http client', function(done) {\n    var myRequest = function() {\n    };\n    soap.createClient(__dirname + '/wsdl/default_namespace.wsdl',\n      {request: myRequest},\n      function(err, client) {\n        assert.ok(client);\n        assert.ok(!err);\n        assert.equal(client.httpClient._request, myRequest);\n        done();\n      });\n  });\n\n  it('should set binding style to \"document\" by default if not explicitly set in WSDL, per SOAP spec', function (done) {\n    soap.createClient(__dirname+'/wsdl/binding_document.wsdl', function(err, client) {\n      assert.ok(client);\n      assert.ok(!err);\n\n      assert.ok(client.wsdl.definitions.bindings.mySoapBinding.style === 'document');\n      done();\n    });\n  });\n\n  describe('Headers in request and last response', function() {\n    var server = null;\n    var hostname = '127.0.0.1';\n    var port = 15099;\n    var baseUrl = 'http://' + hostname + ':' + port;\n\n    before(function(done) {\n      server = http.createServer(function (req, res) {\n        var status_value = (req.headers['test-header'] === 'test') ? 'pass' : 'fail';\n\n        res.setHeader('status', status_value);\n        res.statusCode = 200;\n        res.write(JSON.stringify({tempResponse: 'temp'}), 'utf8');\n        res.end();\n      }).listen(port, hostname, done);\n    });\n\n    after(function(done) {\n      server.close();\n      server = null;\n      done();\n    });\n\n    it('should append `:' + port + '` to the Host header on for a request to a service on that port', function(done) {\n      soap.createClient(__dirname+'/wsdl/default_namespace.wsdl', function(err, client) {\n        assert.ok(client);\n        assert.ok(!err);\n\n        client.MyOperation({}, function(err, result) {\n          assert.notEqual(client.lastRequestHeaders.Host.indexOf(':' + port), -1);\n\n          done();\n        }, null, {'test-header': 'test'});\n      }, baseUrl);\n    });\n\n    it('should not append `:80` to the Host header on for a request to a service without a port explicitly defined', function(done) {\n      soap.createClient(__dirname+'/wsdl/default_namespace.wsdl', function(err, client) {\n        assert.ok(client);\n        assert.ok(!err);\n\n        client.MyOperation({}, function(err, result) {\n          assert.equal(client.lastRequestHeaders.Host.indexOf(':80'), -1);\n\n          done();\n        }, null, {'test-header': 'test'});\n      }, 'http://127.0.0.1');\n    });\n\n    it('should not append `:443` to the Host header if endpoints runs on `https`', function (done) {\n      soap.createClient(__dirname+'/wsdl/default_namespace.wsdl', function(err, client) {\n        assert.ok(client);\n        assert.ok(!err);\n\n        client.MyOperation({}, function() {\n          assert.equal(client.lastRequestHeaders.Host.indexOf(':443'), -1);\n          done();\n        }, null, {'test-header': 'test'});\n      }, 'https://127.0.0.1');\n    });\n\n    it('should append a port to the Host header if explicitly defined', function (done) {\n      soap.createClient(__dirname+'/wsdl/default_namespace.wsdl', function(err, client) {\n        assert.ok(client);\n        assert.ok(!err);\n\n        client.MyOperation({}, function() {\n          assert.ok(client.lastRequestHeaders.Host.indexOf(':443') > -1);\n          done();\n        }, null, {'test-header': 'test'});\n      }, 'https://127.0.0.1:443');\n    });\n\n    it('should have the correct extra header in the request', function(done) {\n      soap.createClient(__dirname+'/wsdl/default_namespace.wsdl', function(err, client) {\n        assert.ok(client);\n        assert.ok(!err);\n\n        client.MyOperation({}, function(err, result) {\n          assert.ok(result);\n          assert.ok(client.lastResponseHeaders);\n          assert.equal(client.lastResponseHeaders.status, 'pass');\n\n          done();\n        }, null, {'test-header': 'test'});\n      }, baseUrl);\n    });\n\n    it('should have the wrong extra header in the request', function(done) {\n      soap.createClient(__dirname+'/wsdl/default_namespace.wsdl', function(err, client) {\n        assert.ok(client);\n        assert.ok(!err);\n\n        client.MyOperation({}, function(err, result) {\n          assert.ok(result);\n          assert.ok(client.lastResponseHeaders);\n          assert.equal(client.lastResponseHeaders.status, 'fail');\n\n          done();\n        }, null, {'test-header': 'testBad'});\n      }, baseUrl);\n    });\n\n    it('should have lastResponse and lastResponseHeaders after the call', function(done) {\n      soap.createClient(__dirname+'/wsdl/default_namespace.wsdl', function(err, client) {\n        assert.ok(client);\n        assert.ok(!err);\n\n        client.MyOperation({}, function(err, result) {\n          assert.ok(result);\n          assert.ok(client.lastResponse);\n          assert.ok(client.lastResponseHeaders);\n\n          done();\n        }, null, {'test-header': 'test'});\n      }, baseUrl);\n    });\n\n    it('should not return error in the call and return the json in body', function(done) {\n      soap.createClient(__dirname+'/wsdl/json_response.wsdl', function(err, client) {\n        assert.ok(client);\n        assert.ok(!err);\n\n        client.MyOperation({}, function(err, result, body) {\n          assert.ok(result);\n          assert.ok(!err);\n          assert.ok(body);\n          done();\n        }, null, {\"test-header\": 'test'});\n      }, baseUrl);\n    });\n  });\n\n  it('should add soap headers', function (done) {\n    soap.createClient(__dirname + '/wsdl/default_namespace.wsdl', function (err, client) {\n        assert.ok(client);\n        assert.ok(!client.getSoapHeaders());\n        var soapheader = {\n          'esnext': false,\n          'moz': true,\n          'boss': true,\n          'node': true,\n          'validthis': true,\n          'globals': {\n            'EventEmitter': true,\n            'Promise': true\n          }\n        };\n\n        client.addSoapHeader(soapheader);\n\n        assert.ok(client.getSoapHeaders()[0] === '<esnext>false</esnext><moz>true</moz><boss>true</boss><node>true</node><validthis>true</validthis><globals><EventEmitter>true</EventEmitter><Promise>true</Promise></globals>');\n        done();\n      });\n  });\n\n  it('should add soap headers with a namespace', function(done) {\n    soap.createClient(__dirname+'/wsdl/default_namespace.wsdl', function(err, client) {\n      assert.ok(client);\n      assert.ok(!client.getSoapHeaders());\n\n      client.addSoapHeader({header1: 'content'}, null, null, 'http://example.com');\n\n      assert.ok(client.getSoapHeaders().length === 1);\n      assert.ok(client.getSoapHeaders()[0] === '<header1 xmlns=\"http://example.com\">content</header1>');\n\n      client.clearSoapHeaders();\n      assert.ok(!client.getSoapHeaders());\n      done();\n    });\n  });\n\n  describe('Namespace number', function() {\n    var server = null;\n    var hostname = '127.0.0.1';\n    var port = 15099;\n    var baseUrl = 'http://' + hostname + ':' + port;\n\n    before(function(done) {\n      server = http.createServer(function (req, res) {\n        res.statusCode = 200;\n        res.write(JSON.stringify({tempResponse: 'temp'}), 'utf8');\n        res.end();\n      }).listen(port, hostname, done);\n    });\n\n    after(function(done) {\n      server.close();\n      server = null;\n      done();\n    });\n\n    it('should reset the namespace number', function (done) {\n      soap.createClient(__dirname + '/wsdl/default_namespace.wsdl', function (err, client) {\n        assert.ok(client);\n\n        var data = {\n          attributes: {\n            xsi_type: {\n              type: 'Ty',\n              xmlns: 'xmlnsTy'\n            }\n          }\n        };\n\n        var message = '<Request xsi:type=\"ns1:Ty\" xmlns:ns1=\"xmlnsTy\" xmlns=\"http://www.example.com/v1\"></Request>';\n        client.MyOperation(data, function(err, result) {\n          assert.ok(client.lastRequest);\n          assert.ok(client.lastMessage);\n          assert.ok(client.lastEndpoint);\n          assert.equal(client.lastMessage, message);\n\n          delete data.attributes.xsi_type.namespace;\n          client.MyOperation(data, function(err, result) {\n            assert.ok(client.lastRequest);\n            assert.ok(client.lastMessage);\n            assert.ok(client.lastEndpoint);\n            assert.equal(client.lastMessage, message);\n\n            done();\n          });\n        });\n      }, baseUrl);\n    });\n  });\n\n  describe('Follow even non-standard redirects', function() {\n    var server1 = null;\n    var server2 = null;\n    var server3 = null;\n    var hostname = '127.0.0.1';\n    var port = 15099;\n    var baseUrl = 'http://' + hostname + ':' + port;\n\n    before(function(done) {\n      server1 = http.createServer(function (req, res) {\n        res.statusCode = 301;\n        res.setHeader('Location', 'http://' + hostname + ':' + (port+1));\n        res.end();\n      }).listen(port, hostname, function() {\n        server2 = http.createServer(function (req, res) {\n          res.statusCode = 302;\n          res.setHeader('Location', 'http://' + hostname + ':' + (port+2));\n          res.end();\n        }).listen((port+1), hostname, function() {\n          server3 = http.createServer(function (req, res) {\n            res.statusCode = 401;\n            res.write(JSON.stringify({tempResponse: 'temp'}), 'utf8');\n            res.end();\n          }).listen((port+2), hostname, done);\n        });\n      });\n    });\n\n    after(function(done) {\n      server1.close();\n      server2.close();\n      server3.close();\n      server1 = null;\n      server2 = null;\n      server3 = null;\n      done();\n    });\n\n    it('should return an error', function (done) {\n      soap.createClient(__dirname + '/wsdl/default_namespace.wsdl', function (err, client) {\n        client.MyOperation({}, function(err, result) {\n          assert.ok(err);\n          assert.ok(err.response);\n          assert.equal(err.body, '{\"tempResponse\":\"temp\"}');\n          done();\n        });\n      }, baseUrl);\n    });\n  });\n\n  describe('Handle non-success http status codes', function() {\n    var server = null;\n    var hostname = '127.0.0.1';\n    var port = 15099;\n    var baseUrl = 'http://' + hostname + ':' + port;\n\n    before(function(done) {\n      server = http.createServer(function (req, res) {\n        res.statusCode = 401;\n        res.write(JSON.stringify({tempResponse: 'temp'}), 'utf8');\n        res.end();\n      }).listen(port, hostname, done);\n    });\n\n    after(function(done) {\n      server.close();\n      server = null;\n      done();\n    });\n\n    it('should return an error', function (done) {\n      soap.createClient(__dirname + '/wsdl/default_namespace.wsdl', function (err, client) {\n        client.MyOperation({}, function(err, result) {\n          assert.ok(err);\n          assert.ok(err.response);\n          assert.ok(err.body);\n          done();\n        });\n      }, baseUrl);\n    });\n\n    it('should emit a \\'soapError\\' event', function (done) {\n      soap.createClient(__dirname + '/wsdl/default_namespace.wsdl', function (err, client) {\n        client.on('soapError', function(err) {\n          assert.ok(err);\n        });\n        client.MyOperation({}, function(err, result) {\n          done();\n        });\n      }, baseUrl);\n    });\n  });\n\n  describe('Handle HTML answer from non-SOAP server', function() {\n    var server = null;\n    var hostname = '127.0.0.1';\n    var port = 15099;\n    var baseUrl = 'http://' + hostname + ':' + port;\n\n    before(function(done) {\n      server = http.createServer(function (req, res) {\n        res.statusCode = 200;\n        res.write('<html><body></body></html>', 'utf8');\n        res.end();\n      }).listen(port, hostname, done);\n    });\n\n    after(function(done) {\n      server.close();\n      server = null;\n      done();\n    });\n\n    it('should return an error', function (done) {\n      soap.createClient(__dirname + '/wsdl/default_namespace.wsdl', function (err, client) {\n        client.MyOperation({}, function(err, result) {\n          assert.ok(err);\n          assert.ok(err.response);\n          assert.ok(err.body);\n          done();\n        });\n      }, baseUrl);\n    });\n  });\n\n  describe('Client Events', function () {\n    var server = null;\n    var hostname = '127.0.0.1';\n    var port = 15099;\n    var baseUrl = 'http://' + hostname + \":\" + port;\n\n    before(function(done) {\n      server = http.createServer(function (req, res) {\n        res.statusCode = 200;\n        fs.createReadStream(__dirname + '/soap-failure.xml').pipe(res);\n      }).listen(port, hostname, done);\n    });\n\n    after(function(done) {\n      server.close();\n      server = null;\n      done();\n    });\n\n\n    it('Should emit the \"message\" event with Soap Body string', function (done) {\n      soap.createClient(__dirname + '/wsdl/default_namespace.wsdl', function (err, client) {\n        var didEmitEvent = false;\n        client.on('message', function (xml) {\n          didEmitEvent = true;\n          // Should contain only message body\n          assert.equal(typeof xml, 'string');\n          assert.equal(xml.indexOf('soap:Envelope'), -1);\n        });\n\n        client.MyOperation({}, function() {\n          assert.ok(didEmitEvent);\n          done();\n        });\n      }, baseUrl);\n    });\n\n    it('Should emit the \"request\" event with entire XML message', function (done) {\n      soap.createClient(__dirname + '/wsdl/default_namespace.wsdl', function (err, client) {\n        var didEmitEvent = false;\n        client.on('request', function (xml) {\n          didEmitEvent = true;\n          // Should contain entire soap message\n          assert.equal(typeof xml, 'string');\n          assert.notEqual(xml.indexOf('soap:Envelope'), -1);\n        });\n\n        client.MyOperation({}, function() {\n          assert.ok(didEmitEvent);\n          done();\n        });\n      }, baseUrl);\n    });\n\n    it('Should emit the \"response\" event with Soap Body string', function (done) {\n      soap.createClient(__dirname + '/wsdl/default_namespace.wsdl', function (err, client) {\n        var didEmitEvent = false;\n        client.on('response', function (xml) {\n          didEmitEvent = true;\n          // Should contain entire soap message\n          assert.equal(typeof xml, 'string');\n          assert.equal(xml.indexOf('soap:Envelope'), -1);\n        });\n\n        client.MyOperation({}, function() {\n          assert.ok(didEmitEvent);\n          done();\n        });\n      }, baseUrl);\n    });\n\n    it('should emit a \\'soapError\\' event', function (done) {\n      soap.createClient(__dirname + '/wsdl/default_namespace.wsdl', function (err, client) {\n        var didEmitEvent = false;\n        client.on('soapError', function(err) {\n          didEmitEvent = true;\n          assert.ok(err.root.Envelope.Body.Fault);\n        });\n        client.MyOperation({}, function(err, result) {\n          assert.ok(didEmitEvent);\n          done();\n        });\n      }, baseUrl);\n    });\n\n  });\n\n  it('should return error in the call when Fault was returned', function(done) {\n    var server = null;\n    var hostname = '127.0.0.1';\n    var port = 15099;\n    var baseUrl = 'http://' + hostname + ':' + port;\n\n    server = http.createServer(function (req, res) {\n      res.statusCode = 200;\n      res.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?><SOAP-ENV:Envelope SOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\"\\n  xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\\n  xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n  xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n  xmlns:SOAP-ENC=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\">\\n<SOAP-ENV:Body><SOAP-ENV:Fault><faultcode xsi:type=\\\"xsd:string\\\">Test</faultcode><faultactor xsi:type=\\\"xsd:string\\\"></faultactor><faultstring xsi:type=\\\"xsd:string\\\">test error</faultstring><detail xsi:type=\\\"xsd:string\\\">test detail</detail></SOAP-ENV:Fault></SOAP-ENV:Body></SOAP-ENV:Envelope>\");\n      res.end();\n    }).listen(port, hostname, function() {\n      soap.createClient(__dirname+'/wsdl/json_response.wsdl', function(err, client) {\n        assert.ok(client);\n        assert.ok(!err);\n\n        client.MyOperation({}, function(err, result, body) {\n          server.close();\n          server = null;\n          assert.ok(err);\n          assert.strictEqual(err.message, 'Test: test error: test detail');\n          assert.ok(result);\n          assert.ok(body);\n          done();\n        });\n      }, baseUrl);\n    });\n\n  });\n\n});\n","markerStore":{"nextMarkerId":2,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":32,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/bellahora-04/Downloads/node-soap-master/test/client-test.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"a3627c54013760fb7f5ada66c5ffb33a75b61d97","deserializer":"TextBuffer","version":2},{"text":"'use strict';\n\nvar assert = require('assert');\nvar fs   = require('fs');\nvar glob   = require('glob');\nvar http = require('http');\nvar path = require('path');\nvar timekeeper = require('timekeeper');\nvar soap = require('../');\nvar WSSecurity = require('../lib/security/WSSecurity');\nvar server;\nvar port;\nvar tests = glob.sync('./request-response-samples/*', {cwd:__dirname})\n  .map(function(node){return path.resolve(__dirname, node);})\n  .filter(function(node){return fs.statSync(node).isDirectory();});\nvar suite = {};\n\nvar requestContext = {\n  //set these two within each test\n  expectedRequest:null,\n  responseToSend:null,\n  doneHandler:null,\n  requestHandler:function(req, res){\n    var chunks = [];\n    req.on('data', function(chunk){\n      chunks.push(chunk);\n    });\n    req.on('end', function(){\n      if(!requestContext.expectedRequest)return res.end(requestContext.responseToSend);\n      if(!requestContext.responseToSend)return requestContext.doneHandler();\n      assert.equal(chunks.join(''), requestContext.expectedRequest);\n      res.end(requestContext.responseToSend);\n      requestContext.expectedRequest = null;\n      requestContext.responseToSend = null;\n    });\n  }\n};\n\ntests.forEach(function(test){\n  var nameParts = path.basename(test).split('__');\n  var name = nameParts[1].replace(/_/g, ' ');\n  var methodName = nameParts[0];\n  var wsdl = path.resolve(test, 'soap.wsdl');\n  var headerJSON = path.resolve(test, 'header.json');\n  var securityJSON = path.resolve(test, 'security.json');\n  var requestJSON = path.resolve(test, 'request.json');\n  var requestXML = path.resolve(test, 'request.xml');\n  var responseJSON = path.resolve(test, 'response.json');\n  var responseSoapHeaderJSON = path.resolve(test, 'responseSoapHeader.json');\n  var responseJSONError = path.resolve(test, 'error_response.json');\n  var responseXML = path.resolve(test, 'response.xml');\n  var options = path.resolve(test, 'options.json');\n  var wsdlOptionsFile = path.resolve(test, 'wsdl_options.json');\n  var wsdlOptions = {};\n\n  //headerJSON is optional\n  if(fs.existsSync(headerJSON))headerJSON = require(headerJSON);\n  else headerJSON = {};\n\n  //securityJSON is optional\n  if(fs.existsSync(securityJSON))securityJSON = require(securityJSON);\n  else securityJSON = {};\n\n  //responseJSON is optional\n  if (fs.existsSync(responseJSON))responseJSON = require(responseJSON);\n  else if(fs.existsSync(responseJSONError))responseJSON = require(responseJSONError);\n  else responseJSON = null;\n\n  //responseSoapHeaderJSON is optional\n  if (fs.existsSync(responseSoapHeaderJSON))responseSoapHeaderJSON = require(responseSoapHeaderJSON);\n  else responseSoapHeaderJSON = null;\n\n  //requestXML is optional\n  if(fs.existsSync(requestXML))requestXML = ''+fs.readFileSync(requestXML);\n  else requestXML = null;\n\n  //responseXML is optional\n  if(fs.existsSync(responseXML))responseXML = ''+fs.readFileSync(responseXML);\n  else responseXML = null;\n\n  //requestJSON is required as node-soap will expect a request object anyway\n  requestJSON = require(requestJSON);\n\n  //options is optional\n  if (fs.existsSync(options))options = require(options);\n  else options = {};\n\n  //wsdlOptions is optional\n  if(fs.existsSync(wsdlOptionsFile)) wsdlOptions = require(wsdlOptionsFile);\n  else wsdlOptions = {};\n\n  generateTest(name, methodName, wsdl, headerJSON, securityJSON, requestXML, requestJSON, responseXML, responseJSON, responseSoapHeaderJSON, wsdlOptions, options);\n});\n\nfunction generateTest(name, methodName, wsdlPath, headerJSON, securityJSON, requestXML, requestJSON, responseXML, responseJSON, responseSoapHeaderJSON, wsdlOptions, options){\n  suite[name] = function(done){\n    if(requestXML) requestContext.expectedRequest = requestXML;\n    if(responseXML) requestContext.responseToSend = responseXML;\n    requestContext.doneHandler = done;\n    soap.createClient(wsdlPath, wsdlOptions, function(err, client){\n      if (headerJSON) {\n        for (var headerKey in headerJSON) {\n          client.addSoapHeader(headerJSON[headerKey], headerKey);\n        }\n      }\n      if (securityJSON && securityJSON.type === 'ws') {\n        client.setSecurity(new WSSecurity(securityJSON.username, securityJSON.password));\n      }\n      client[methodName](requestJSON, function(err, json, body, soapHeader){\n        if(requestJSON){\n          if (err) {\n            assert.deepEqual(err.root, responseJSON);\n          } else {\n            // assert.deepEqual(json, responseJSON);\n            assert.equal(JSON.stringify(json), JSON.stringify(responseJSON));\n            if(responseSoapHeaderJSON){\n              assert.equal(JSON.stringify(soapHeader), JSON.stringify(responseSoapHeaderJSON));\n            }\n          }\n        }\n        done();\n      }, options);\n    }, 'http://localhost:'+port+'/Message/Message.dll?Handler=Default');\n  };\n}\n\ndescribe('Request Response Sampling', function() {\n  var origRandom = Math.random;\n\n  before(function(done){\n    timekeeper.freeze(Date.parse('2014-10-12T01:02:03Z'));\n    Math.random = function() { return 1; };\n    server = http.createServer(requestContext.requestHandler);\n    server.listen(0, function(e){\n      if(e)return done(e);\n      port = server.address().port;\n      done();\n    });\n  });\n\n  beforeEach(function(){\n    requestContext.expectedRequest = null;\n    requestContext.responseToSend = null;\n    requestContext.doneHandler = null;\n  });\n\n  after(function(){\n    timekeeper.reset();\n    Math.random = origRandom;\n    server.close();\n  });\n\n  Object.keys(suite).map(function(key) {\n    it(key, suite[key]);\n  });\n});\n","markerStore":{"nextMarkerId":2,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":36,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/bellahora-04/Downloads/node-soap-master/test/request-response-samples-test.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"20675a1d334ee4a2b0672a32f91ba925d5163977","deserializer":"TextBuffer","version":2},{"text":"\"use strict\";\n\nvar fs = require('fs'),\n    soap = require('..'),\n    assert = require('assert'),\n    request = require('request'),\n    http = require('http');\n\nvar test = {};\ntest.server = null;\ntest.service = {\n  StockQuoteService: {\n    StockQuotePort: {\n      GetLastTradePrice: function(args, cb, soapHeader) {\n        if (soapHeader)\n          return { price: soapHeader.SomeToken };\n        if (args.tickerSymbol === 'trigger error') {\n          throw new Error('triggered server error');\n        } else if (args.tickerSymbol === 'Async') {\n          return cb({ price: 19.56 });\n        } else if (args.tickerSymbol === 'SOAP Fault v1.2') {\n          throw {\n            Fault: {\n              Code: {\n                Value: \"soap:Sender\",\n                Subcode: { value: \"rpc:BadArguments\" }\n              },\n              Reason: { Text: \"Processing Error\" }\n            }\n          };\n        } else if (args.tickerSymbol === 'SOAP Fault v1.1') {\n          throw {\n            Fault: {\n              faultcode: \"soap:Client.BadArguments\",\n              faultstring: \"Error while processing arguments\"\n            }\n          };\n        } else {\n          return { price: 19.56 };\n        }\n      },\n\n      SetTradePrice: function(args, cb, soapHeader) {\n      },\n\n      IsValidPrice: function(args, cb, soapHeader) {\n        var validationError = {\n          Fault: {\n            Code: {\n              Value: \"soap:Sender\",\n              Subcode: { value: \"rpc:BadArguments\" }\n            },\n            Reason: { Text: \"Processing Error\" }\n          }\n        };\n\n        var isValidPrice = function() {\n          var price = args.price;\n          if(isNaN(price) || (price === ' '))\n            return cb(validationError);\n\n          price = parseInt(price, 10);\n          var validPrice = (price > 0 && price < Math.pow(10, 5));\n          return cb(null, { valid: validPrice });\n        };\n\n        setTimeout(isValidPrice, 10);\n      }\n    }\n  }\n};\n\ndescribe('SOAP Server', function() {\n  before(function(done) {\n    fs.readFile(__dirname + '/wsdl/strict/stockquote.wsdl', 'utf8', function(err, data) {\n      assert.ok(!err);\n      test.wsdl = data;\n      done();\n    });\n  });\n\n  beforeEach(function(done) {\n    test.server = http.createServer(function(req, res) {\n      res.statusCode = 404;\n      res.end();\n    });\n\n    test.server.listen(15099, null, null, function() {\n      test.soapServer = soap.listen(test.server, '/stockquote', test.service, test.wsdl);\n      test.baseUrl =\n        'http://' + test.server.address().address + \":\" + test.server.address().port;\n\n      //windows return 0.0.0.0 as address and that is not\n      //valid to use in a request\n      if (test.server.address().address === '0.0.0.0' || test.server.address().address === '::') {\n        test.baseUrl =\n          'http://127.0.0.1:' + test.server.address().port;\n      }\n\n      done();\n    });\n  });\n\n  afterEach(function(done) {\n    test.server.close(function() {\n      test.server = null;\n      delete test.soapServer;\n      test.soapServer = null;\n      done();\n    });\n  });\n\n\n  it('should be running', function(done) {\n    request(test.baseUrl, function(err, res, body) {\n      assert.ok(!err);\n      done();\n    });\n  });\n\n  it('should 404 on non-WSDL path', function(done) {\n    request(test.baseUrl, function(err, res, body) {\n      assert.ok(!err);\n      assert.equal(res.statusCode, 404);\n      done();\n    });\n  });\n\n  it('should server up WSDL', function(done) {\n    request(test.baseUrl + '/stockquote?wsdl', function(err, res, body) {\n      assert.ok(!err);\n      assert.equal(res.statusCode, 200);\n      assert.ok(body.length);\n      done();\n    });\n  });\n\n  it('should return complete client description', function(done) {\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      var description = client.describe(),\n          expected = { input: { tickerSymbol: \"string\" }, output:{ price: \"float\" } };\n      assert.deepEqual(expected , description.StockQuoteService.StockQuotePort.GetLastTradePrice);\n      done();\n    });\n  });\n\n  it('should return correct results', function(done) {\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.GetLastTradePrice({ tickerSymbol: 'AAPL'}, function(err, result) {\n        assert.ok(!err);\n        assert.equal(19.56, parseFloat(result.price));\n        done();\n      });\n    });\n  });\n\n  it('should return correct async results (single argument callback style)', function(done) {\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.GetLastTradePrice({ tickerSymbol: 'Async'}, function(err, result) {\n        assert.ok(!err);\n        assert.equal(19.56, parseFloat(result.price));\n        done();\n      });\n    });\n  });\n\n\n  it('should return correct async results (double argument callback style)', function(done) {\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.IsValidPrice({ price: 50000 }, function(err, result) {\n        assert.ok(!err);\n        assert.equal(true, !!(result.valid));\n        done();\n      });\n    });\n  });\n\n  it('should return correct async errors', function(done) {\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.IsValidPrice({ price: \"invalid_price\"}, function(err, result) {\n        assert.ok(err);\n        assert.ok(err.root.Envelope.Body.Fault);\n        done();\n      });\n    });\n  });\n\n  it('should handle headers in request', function(done) {\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.addSoapHeader('<SomeToken>123.45</SomeToken>');\n      client.GetLastTradePrice({ tickerSymbol: 'AAPL'}, function(err, result) {\n        assert.ok(!err);\n        assert.equal(123.45, parseFloat(result.price));\n        done();\n      });\n    });\n  });\n\n  it('should return security timestamp in response', function(done) {\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.addSoapHeader('<Security><Timestamp><Created>2015-02-23T12:00:00.000Z</Created><Expires>2015-02-23T12:05:00.000Z</Expires></Timestamp></Security>');\n      client.GetLastTradePrice({ tickerSymbol: 'AAPL'}, function(err, result, raw, soapHeader) {\n        assert.ok(!err);\n        assert.ok(soapHeader && soapHeader.Security && soapHeader.Security.Timestamp);\n        done();\n      });\n    });\n  });\n\n  it('should emit \\'request\\' event', function(done) {\n    test.soapServer.on('request', function requestManager(request, methodName) {\n      assert.equal(methodName, 'GetLastTradePrice');\n      done();\n    });\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.GetLastTradePrice({ tickerSymbol: 'AAPL'}, function() {});\n    });\n  });\n\n  it('should emit \\'headers\\' event', function(done) {\n    test.soapServer.on('headers', function headersManager(headers, methodName) {\n      assert.equal(methodName, 'GetLastTradePrice');\n      headers.SomeToken = 0;\n    });\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.addSoapHeader('<SomeToken>123.45</SomeToken>');\n      client.GetLastTradePrice({ tickerSymbol: 'AAPL'}, function(err, result) {\n        assert.ok(!err);\n        assert.equal(0, parseFloat(result.price));\n        done();\n      });\n    });\n  });\n\n  it('should not emit the \\'headers\\' event when there are no headers', function(done) {\n    test.soapServer.on('headers', function headersManager(headers, methodName) {\n      assert.ok(false);\n    });\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.GetLastTradePrice({ tickerSymbol: 'AAPL'}, function(err, result) {\n        assert.ok(!err);\n        done();\n      });\n    });\n  });\n\n  it('should include response and body in error object', function(done) {\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.GetLastTradePrice({ tickerSymbol: 'trigger error' }, function(err, response, body) {\n        assert.ok(err);\n        assert.strictEqual(err.response, response);\n        assert.strictEqual(err.body, body);\n        done();\n      });\n    });\n  });\n\n  it('should return SOAP Fault body for SOAP 1.2', function(done) {\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.GetLastTradePrice({ tickerSymbol: 'SOAP Fault v1.2' }, function(err, response, body) {\n        assert.ok(err);\n        var fault = err.root.Envelope.Body.Fault;\n        assert.equal(fault.Code.Value, \"soap:Sender\");\n        assert.equal(fault.Reason.Text, \"Processing Error\");\n        // Verify namespace on elements set according to fault spec 1.2\n        assert.ok(body.match(/<soap:Code>.*<\\/soap:Code>/g),\n          \"Body should contain Code-element with namespace\");\n        assert.ok(body.match(/<soap:Reason>.*<\\/soap:Reason>/g),\n          \"Body should contain Reason-element with namespace\");\n        done();\n      });\n    });\n  });\n\n  it('should return SOAP Fault body for SOAP 1.1', function(done) {\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.GetLastTradePrice({ tickerSymbol: 'SOAP Fault v1.1' }, function(err, response, body) {\n        assert.ok(err);\n        var fault = err.root.Envelope.Body.Fault;\n        assert.equal(fault.faultcode, \"soap:Client.BadArguments\");\n        assert.equal(fault.faultstring, \"Error while processing arguments\");\n        // Verify namespace on elements set according to fault spec 1.1\n        assert.ok(body.match(/<faultcode>.*<\\/faultcode>/g),\n          \"Body should contain faultcode-element without namespace\");\n        assert.ok(body.match(/<faultstring>.*<\\/faultstring>/g),\n          \"Body should contain faultstring-element without namespace\");\n        done();\n      });\n    });\n  });\n\n  it('should return SOAP Fault thrown from \\'headers\\' event handler', function(done) {\n    test.soapServer.on('headers', function headersManager() {\n      throw {\n        Fault: {\n          Code: {\n            Value: \"soap:Sender\",\n            Subcode: { value: \"rpc:BadArguments\" }\n          },\n          Reason: { Text: \"Processing Error\" }\n        }\n      };\n    });\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      client.addSoapHeader('<SomeToken>0.0</SomeToken>');\n      client.GetLastTradePrice({ tickerSymbol: 'AAPL'}, function(err, result) {\n        assert.ok(err);\n        assert.ok(err.root.Envelope.Body.Fault);\n        done();\n      });\n    });\n  });\n\n  it('should accept attributes as a string on the body element', function(done) {\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.addBodyAttribute('xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"######################\"');\n      client.GetLastTradePrice({ tickerSymbol: 'AAPL' }, function(err, response, body) {\n        assert.ok(!err);\n        done();\n      });\n    });\n  });\n\n  it('should accept attributes as an object on the body element', function(done) {\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      var attributes = { 'xmlns:wsu': 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd', 'wsu:Id': '######################' };\n      client.addBodyAttribute(attributes);\n      client.GetLastTradePrice({ tickerSymbol: 'AAPL' }, function(err, response, body) {\n        assert.ok(!err);\n        done();\n      });\n    });\n  });\n\n  it('should handle one-way operations', function(done) {\n    soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n      assert.ok(!err);\n      client.SetTradePrice({ tickerSymbol: 'GOOG', price: 575.33 }, function(err, result) {\n        assert.ok(!err);\n        assert.equal(result,null);\n        done();\n      });\n    });\n  });\n\n// NOTE: this is actually a -client- test\n/*\nit('should return a valid error if the server stops responding': function(done) {\n  soap.createClient(test.baseUrl + '/stockquote?wsdl', function(err, client) {\n    assert.ok(!err);\n    server.close(function() {\n      server = null;\n      client.GetLastTradePrice({ tickerSymbol: 'trigger error' }, function(err, response, body) {\n        assert.ok(err);\n        done();\n      });\n    });\n  });\n});\n*/\n\n});\n","markerStore":{"nextMarkerId":2,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":40,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/bellahora-04/Downloads/node-soap-master/test/server-test.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3e3d3097c21602cf209beb9216c05e05d9adfd35","deserializer":"TextBuffer","version":2},{"text":"<?xml version='1.0' ?>\n<!-- http://www.w3.org/TR/2003/REC-soap12-part0-20030624/#L11549 -->\n<env:Envelope xmlns:env=\"http://www.w3.org/2003/05/soap-envelope\"\n            xmlns:rpc='http://www.w3.org/2003/05/soap-rpc'>\n  <env:Body>\n   <env:Fault>\n     <env:Code>\n       <env:Value>env:Sender</env:Value>\n       <env:Subcode>\n        <env:Value>rpc:BadArguments</env:Value>\n       </env:Subcode>\n     </env:Code>\n     <env:Reason>\n      <env:Text xml:lang=\"en-US\">Processing error</env:Text>\n      <env:Text xml:lang=\"cs\">Chyba zpracování</env:Text>\n     </env:Reason>\n     <env:Detail>\n      <e:myFaultDetails \n        xmlns:e=\"http://travelcompany.example.org/faults\">\n        <e:message>Name does not match card number</e:message>\n        <e:errorcode>999</e:errorcode>\n      </e:myFaultDetails>\n     </env:Detail>\n   </env:Fault>\n </env:Body>\n</env:Envelope>\n","markerStore":{"nextMarkerId":2,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":44,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/bellahora-04/Downloads/node-soap-master/test/soap-failure.xml","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0cd1dbc1ee96af19a8e374ea7b41c5e78c274c7c","deserializer":"TextBuffer","version":2},{"text":"\"use strict\";\n\nvar fs = require('fs'),\n    soap = require('..'),\n    https = require('https'),\n    constants = require('constants'),\n    assert = require('assert');\n\nvar test = {};\ntest.service = {\n  StockQuoteService: {\n    StockQuotePort: {\n      GetLastTradePrice: function(args) {\n        if (args.tickerSymbol === 'trigger error') {\n          throw new Error('triggered server error');\n        } else {\n          return { price: 19.56 };\n        }\n      }\n    }\n  }\n};\n\ntest.sslOptions = {\n  key: fs.readFileSync(__dirname + '/certs/agent2-key.pem'),\n  cert: fs.readFileSync(__dirname + '/certs/agent2-cert.pem')\n};\n\ndescribe('SOAP Client(SSL)', function() {\n  before(function(done) {\n    fs.readFile(__dirname + '/wsdl/strict/stockquote.wsdl', 'utf8', function(err, data) {\n      assert.ok(!err);\n      test.wsdl = data;\n      done();\n    });\n  });\n\n  beforeEach(function(done) {\n    test.server = https.createServer(test.sslOptions, function(req, res) {\n      res.statusCode = 404;\n      res.end();\n    }).listen(51515, function() {\n      test.soapServer = soap.listen(test.server, '/stockquote', test.service, test.wsdl);\n      test.baseUrl =\n        'https://' + test.server.address().address + ':' + test.server.address().port;\n      \n      if (test.server.address().address === '0.0.0.0' || test.server.address().address === '::') {\n        test.baseUrl =\n          'https://127.0.0.1:' + test.server.address().port;\n      }\n      done();\n    });\n  });\n\n  afterEach(function(done) {\n    test.server.close(function() {\n      test.server = null;\n      delete test.soapServer;\n      test.soapServer = null;\n      done();\n    });\n  });\n\n  it('should connect to an SSL server', function(done) {\n    soap.createClient(__dirname + '/wsdl/strict/stockquote.wsdl', function(err, client) {\n      assert.ok(!err);\n      client.setEndpoint(test.baseUrl + '/stockquote');\n      client.setSecurity({\n        addOptions:function(options){\n          options.cert = test.sslOptions.cert,\n          options.key = test.sslOptions.key,\n          options.rejectUnauthorized = false;\n          options.secureOptions = constants.SSL_OP_NO_TLSv1_2;\n          options.strictSSL = false;\n          options.agent = new https.Agent(options);\n        },\n        toXML: function() { return ''; }\n      });\n\n      client.GetLastTradePrice({ tickerSymbol: 'AAPL'}, function(err, result) {\n        assert.ok(!err);\n        assert.equal(19.56, parseFloat(result.price));\n        done();\n      });\n    });\n  });\n\n});\n","markerStore":{"nextMarkerId":2,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":48,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/bellahora-04/Downloads/node-soap-master/test/ssl-test.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2db6f3e321df7fecc903f59f86fc5873d5aa1950","deserializer":"TextBuffer","version":2},{"text":"'use strict';\n\nvar path = require('path');\nvar open_wsdl = require('../lib/wsdl').open_wsdl;\nvar assert = require('assert');\n\ndescribe(__filename, function () {\n  it('should parse recursive elements', function (done) {\n    open_wsdl(path.resolve(__dirname, 'wsdl/recursive.wsdl'), function (err, def) {\n      assert.equal(def.definitions.messages.operationRequest.parts['constraint[]'].expression,\n          def.definitions.messages.operationRequest.parts['constraint[]'].expression.expression);\n      assert.equal(def.definitions.messages.operationRequest.parts['constraint[]'].expression,\n          def.definitions.messages.operationRequest.parts['constraint[]'].expression.expression['constraint[]'].expression);\n      done();\n    });\n  });\n});\n","markerStore":{"nextMarkerId":2,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":52,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/bellahora-04/Downloads/node-soap-master/test/wsdl-parse-test.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b0c6b81aa44d49c6bb6d7192471ec58985b7d1d9","deserializer":"TextBuffer","version":2},{"text":"\"use strict\";\n\nvar fs = require('fs'),\n    soap = require('..'),\n    assert = require('assert');\n\nvar wsdlStrictTests = {},\n    wsdlNonStrictTests = {};\n\nfs.readdirSync(__dirname+'/wsdl/strict').forEach(function(file) {\n  if (!/.wsdl$/.exec(file)) return;\n  wsdlStrictTests['should parse and describe '+file] = function(done) {\n    soap.createClient(__dirname+'/wsdl/strict/'+file, {strict: true}, function(err, client) {\n      assert.ok(!err);\n      client.describe();\n      done();\n    });\n  };\n});\n\nfs.readdirSync(__dirname+'/wsdl').forEach(function(file) {\n  if (!/.wsdl$/.exec(file)) return;\n  wsdlNonStrictTests['should parse and describe '+file] = function(done) {\n    soap.createClient(__dirname+'/wsdl/'+file, function(err, client) {\n      assert.ok(!err);\n      client.describe();\n      done();\n    });\n  };\n});\n\nwsdlNonStrictTests['should not parse connection error'] = function(done) {\n  soap.createClient(__dirname+'/wsdl/connection/econnrefused.wsdl', function(err, client) {\n    assert.ok(/EADDRNOTAVAIL|ECONNREFUSED/.test(err), err);\n    done();\n  });\n};\n\nwsdlNonStrictTests['should catch parse error'] = function(done) {\n  soap.createClient(__dirname+'/wsdl/bad.txt', function(err) {\n    assert.notEqual(err, null);\n    done();\n  });\n};\n\nwsdlStrictTests['should catch parse error'] = function(done) {\n  soap.createClient(__dirname+'/wsdl/bad.txt', {strict: true}, function(err) {\n    assert.notEqual(err, null);\n    done();\n  });\n};\n\nwsdlStrictTests['should parse external wsdl'] = function(done) {\n  soap.createClient(__dirname+'/wsdl/wsdlImport/main.wsdl', {strict: true}, function(err, client){\n    assert.ok(!err);\n    assert.deepEqual(Object.keys(client.wsdl.definitions.schemas),\n      ['http://example.com/', 'http://schemas.microsoft.com/2003/10/Serialization/Arrays']);\n    assert.equal(typeof client.getLatestVersion, 'function');\n    done();\n  });\n};\n\nwsdlStrictTests['should get the parent namespace when parent namespace is empty string'] = function(done) {\n  soap.createClient(__dirname+'/wsdl/marketo.wsdl', {strict: true}, function(err, client){\n    assert.ok(!err);\n    client.getLeadChanges({\n        batchSize: 1,\n        startPosition: {activityCreatedAt: '2014-04-14T22:03:48.587Z'},\n        activityNameFilter: {stringItem: ['Send Email']}\n      }, function() {\n        done();\n      });\n  });\n};\n\nmodule.exports = {\n  'WSDL Parser (strict)': wsdlStrictTests,\n  'WSDL Parser (non-strict)': wsdlNonStrictTests\n};\n","markerStore":{"nextMarkerId":3,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":56,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/bellahora-04/Downloads/node-soap-master/test/wsdl-test.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"abd33f7bdccff0d65ecef595ea77148f489fbfd7","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/bellahora-04/Downloads/node-soap-master/index.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":12,"softTabs":true,"displayBuffer":{"id":13,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/bellahora-04/Downloads/node-soap-master/.travis.yml","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":16,"softTabs":true,"displayBuffer":{"id":17,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/bellahora-04/Downloads/node-soap-master/.npmignore","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":20,"softTabs":true,"displayBuffer":{"id":21,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/bellahora-04/Downloads/node-soap-master/.jshintrc","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":24,"softTabs":true,"displayBuffer":{"id":25,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/bellahora-04/Downloads/node-soap-master/.gitignore","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":28,"softTabs":true,"displayBuffer":{"id":29,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/bellahora-04/Downloads/node-soap-master/.editorconfig","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":32,"softTabs":true,"displayBuffer":{"id":33,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/bellahora-04/Downloads/node-soap-master/test/client-test.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":36,"softTabs":true,"displayBuffer":{"id":37,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/bellahora-04/Downloads/node-soap-master/test/request-response-samples-test.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":40,"softTabs":true,"displayBuffer":{"id":41,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/bellahora-04/Downloads/node-soap-master/test/server-test.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":44,"softTabs":true,"displayBuffer":{"id":45,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/bellahora-04/Downloads/node-soap-master/test/soap-failure.xml","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":48,"softTabs":true,"displayBuffer":{"id":49,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/bellahora-04/Downloads/node-soap-master/test/ssl-test.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":52,"softTabs":true,"displayBuffer":{"id":53,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/bellahora-04/Downloads/node-soap-master/test/wsdl-parse-test.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":56,"softTabs":true,"displayBuffer":{"id":57,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/bellahora-04/Downloads/node-soap-master/test/wsdl-test.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/home/bellahora-04/Downloads/node-soap-master/test/wsdl-test.js","focused":false,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-javascript","language-yaml","language-json","language-xml","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"linter":{"scope":"File"},"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2015-08-03T10:43:23.130Z","version":"1.0.1","markersVersion":"1.0.4","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"4":{"id":4,"colorMarkers":[]},"8":{"id":8,"path":"/home/bellahora-04/Downloads/node-soap-master/index.js","colorMarkers":[]},"12":{"id":12,"path":"/home/bellahora-04/Downloads/node-soap-master/.travis.yml","colorMarkers":[]},"16":{"id":16,"path":"/home/bellahora-04/Downloads/node-soap-master/.npmignore","colorMarkers":[]},"20":{"id":20,"path":"/home/bellahora-04/Downloads/node-soap-master/.jshintrc","colorMarkers":[]},"24":{"id":24,"path":"/home/bellahora-04/Downloads/node-soap-master/.gitignore","colorMarkers":[]},"28":{"id":28,"path":"/home/bellahora-04/Downloads/node-soap-master/.editorconfig","colorMarkers":[]},"32":{"id":32,"path":"/home/bellahora-04/Downloads/node-soap-master/test/client-test.js","colorMarkers":[]},"36":{"id":36,"path":"/home/bellahora-04/Downloads/node-soap-master/test/request-response-samples-test.js","colorMarkers":[]},"40":{"id":40,"path":"/home/bellahora-04/Downloads/node-soap-master/test/server-test.js","colorMarkers":[]},"44":{"id":44,"path":"/home/bellahora-04/Downloads/node-soap-master/test/soap-failure.xml","colorMarkers":[]},"48":{"id":48,"path":"/home/bellahora-04/Downloads/node-soap-master/test/ssl-test.js","colorMarkers":[]},"52":{"id":52,"path":"/home/bellahora-04/Downloads/node-soap-master/test/wsdl-parse-test.js","colorMarkers":[]},"56":{"id":56,"path":"/home/bellahora-04/Downloads/node-soap-master/test/wsdl-test.js","colorMarkers":[]}},"paths":[],"variables":{"deserializer":"VariablesCollection","content":[]}}},"fuzzy-finder":{"/home/bellahora-04/Downloads/node-soap-master/index.js":1438588534027,"/home/bellahora-04/Downloads/node-soap-master/.travis.yml":1438588535863,"/home/bellahora-04/Downloads/node-soap-master/.npmignore":1438588536211,"/home/bellahora-04/Downloads/node-soap-master/.jshintrc":1438588536541,"/home/bellahora-04/Downloads/node-soap-master/.gitignore":1438588536918,"/home/bellahora-04/Downloads/node-soap-master/.editorconfig":1438588537240,"/home/bellahora-04/Downloads/node-soap-master/test/client-test.js":1438588540090,"/home/bellahora-04/Downloads/node-soap-master/test/request-response-samples-test.js":1438588541783,"/home/bellahora-04/Downloads/node-soap-master/test/server-test.js":1438588542274,"/home/bellahora-04/Downloads/node-soap-master/test/soap-failure.xml":1438588543770,"/home/bellahora-04/Downloads/node-soap-master/test/ssl-test.js":1438588544138,"/home/bellahora-04/Downloads/node-soap-master/test/wsdl-parse-test.js":1438588544648,"/home/bellahora-04/Downloads/node-soap-master/test/wsdl-test.js":1438589131261},"metrics":{"sessionLength":10084778},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/home/bellahora-04/Downloads/node-soap-master":{"isExpanded":false,"entries":{}}},"selectedPath":"/home/bellahora-04/Downloads/node-soap-master","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}